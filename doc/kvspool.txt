kvspool: a tool for data streams
================================
Troy D. Hanson <tdh@tkhanson.net>
v0.6, March 2012

kv-spool ("key-value" spool):: 
         a Linux-based C library, with Perl, Python and Java bindings, to stream data
         between programs as key-value dictionaries. The data stream is backed to disk,
         supports rewind, snapshot, network replication, and bounded disk consumption.

kvspool's niche
---------------
Kvspool falls somewhere between the Unix pipe, a file-backed queue and a message-passing
library. Its "unit of data" is the *dictionary*. (Or so Python calls it). Perl calls it a
hash. It's a set of key-value pairs.

To use kvspool, two programs open the same spool (which is just a directory). The writer
puts dictionaries into the spool.  The reader gets dictionaries from the spool, blocking
when it's caught up.  Like this,

image:reader-writer.png[A spool writer and reader]

.Sneak peak
Here's a sneak peak at a really simple writer and reader:

.Sample Python writer                      
[source,python]
  import kvspool                          
  kv = kvspool.Kvspool("spool")          
  d = {"day": "Wed", "temp": 37}        
  kv.write(d)                                                          

.Sample Perl reader
[source,perl]
 use KVSpool;        
 my $kv = KVSpool->new("spool");
 my $d = $kv->read(); 

.Loose coupling
Because the spooled data goes into the disk, the reader and writer are decoupled. They
don't have to run at the same time. They can come and go.  If the reader exits and
restarts, it picks up where it left off.

Space management
~~~~~~~~~~~~~~~~
In a streaming data environment, the writer and reader can run for months on end.  Because
the spool backs the data to disk, space management is necessary: 'don't fill up the disk'.
When we make a spool directory, we tell kvspool what its maximum size should be:

  % mkdir spool
  % kvsp-init -s 1G spool

This configures a maximum of 1 GB of data in the spool. After it reaches that size, it
stays that size (by deleting old data as needed), but it never shrinks even if the data is
fully read. (The data is kept around to reserve that disk space, and to support rewind.) 

Shared memory I/O
~~~~~~~~~~~~~~~~~
You can locate a spool on a RAM disk if you want the speed of shared memory without true
disk persistence- kvspool comes with a `ramdisk` utility to make one easily. 

Data attrition
~~~~~~~~~~~~~~
When the spool is full, and new data arrives, the writer deletes the oldest data to make
room for new. The attrition is done in units that are about 10% of the total spool size.
A reader that runs all the time, or often enough to keep up with the writer, sees all the
data flowing through the spool. But a reader that's offline for long enough can eventually
lose data (that is, miss the opportunity to read it before it's deleted). Data loss is a 
deliberate feature - otherwise it'd be necessary to block the writer or use unbounded
disk space.

Rewind and replay
~~~~~~~~~~~~~~~~~
The spool is a like a long reel-to-reel tape spliced together at the ends. Data remains in
the spool, even after being read, until the spool needs to reuse the space. Kvspool takes
advantage of this history by offering "rewind":

  % kvsp-rewind spool

After a rewind, reading starts at the beginning of the spool. (The reader should be
stopped before issuing the rewind).

Snapshot
~~~~~~~~
A snapshot is just a copy of the spool. You can bring the copy back to a development
environment, rewind it, and use it as a consistent source of test data.

  % cp -r spool snapshot

Copying a spool of "production data" is a great way to do development. The data is real,
but there's no need for the full production environment (no writer) needed to use it.

Local and Network Replication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A spool supports one writer and one reader. To support multiple readers, "tee" it out so
that each reader gets it's own spool:

  % kvsp-tee -s spool copy1 copy2

You can also publish a spool over the network, like this:

  % kvsp-pub -d spool tcp://192.168.1.9:1110

Now, on the remote computers where you wish to subscribe to the spool, run:

  % kvsp-sub -d spool tcp://192.168.1.9:1110

Obviously, the IP address must be valid on the publisher side. The port is up to you. This
type of publish-subscribe does a "fan-out" (each subscriber gets a copy of the data). If
you use the `-s` switch, on both pub and sub, it changes so each subscriber gets only a
"1/n" share of the data. The latter mode is also preferred for 1-1 network replication.

.The big picture
*******************************************************************************
Before moving on- let's take a deep breath and recap. With kvspool, the writer
is completely unaware (blissfully ignorant) of whether network replication is
taking place. The writer just writes to the local spool. We run the `kvsp-pub` 
utility in the background; as data comes into the spool, it transmits it on the 
network.

On the other computer (the receiving side), we run `kvsp-sub` in the background. 
It receives the network transmissions, and writes them to its local spool.

Using `kvsp-pub` and `kvsp-sub`, we completely decouple the writer and reader
from having to run on the same computer. They maintain a live, continuous
replication. Whenever data is written to the source spool, it just "shows up"
in the remote spool.
*******************************************************************************

image:pub-sub.png[Publish and Subscribe]

[TIP]
Use a daemon supervisor such as the author's http://troydhanson.github.com/pmtr/[pmtr
process monitor] to start up these commands at boot up and keep them running in the
background.

License
~~~~~~~
See the link:LICENSE.txt[LICENSE.txt] file. Kvspool is free and open source.

Resources & Help 
~~~~~~~~~~~~~~~~
News about software updates are posted to the author's blog: http://tkhanson.net/blog.
Contact the author directly at tdh@tkhanson.net if you have questions or other issues.

Getting kvspool
---------------
You can clone kvspool from github:

  % git clone git://github.com/troydhanson/kvspool.git

To build kvspool:

  % cd kvspool

If the 'configure' script does not yet exist, run `./bootstrap`.  If you want to build the
network replication utilities, make sure you have *Jansson* and *ZeroMQ* (2.x or 3.x).

  % ./configure
  % make
  % sudo make install

This builds and installs the C library and utilities, and if the prerequisite packages
are installed, it builds the Perl, Python and Java bindings, and ZeroMQ-based utilities.

Utilities
---------

Basic
~~~~~

[width="90%",cols="10m,50m",grid="none",options="header"]
|===============================================================================
|command     | example 
|kvsp-init   | kvsp-init -s 1G spool
|kvsp-status | kvsp-status spool
|kvsp-rewind | kvsp-rewind spool
|kvsp-tee    | kvsp-tee -s spool-in spool-copy1 spool-copy2
|===============================================================================

The `kvsp-init` command is used when a spool directory is first created, to set 
the maximum capacity of the spool. It accepts k/m/g/t suffixes. If `kvsp-init` is
run later, after the spool already exists and has data, it is resized.

Run `kvsp-status` to see what percentage of the spool has been consumed by a reader.

The `kvsp-rewind` command resets the reader position to the beginning (oldest frame) in the
spool. Use this command in order to "replay" the spooled data. Disconnect (terminate) any
readers before running this command.

Use `kvsp-tee` to support multiple readers from one input spool. First make a separate
spool directory for each reader (and use `kvsp-init` to set the capacity of each one);
then use `kvsp-tee` as the reader on the source spool. It maintains a continuous copy of
the spool to the multiple destination spools. This command needs to be left running to
maintain the tee.

Network utilities
~~~~~~~~~~~~~~~~~

[width="90%",cols="10m,50m",grid="none",options="header"]
|===============================================================================
|command     | example 
|kvsp-pub    | kvsp-pub -d spool tcp://192.168.1.9:1110
|kvsp-sub    | kvsp-sub -d spool tcp://192.168.1.9:1110
|===============================================================================

The network utilities keep a local spool continuously replicated to a remote spool.
These require ZeroMQ and Jansson libraries on the system in order to be built.

The `kvsp-pub` and `kvsp-sub` utilities publish a source spool to a remote spool.
The publisher listens on the specified TCP port, and the subscribers connect to it. 
More than one subscriber may run simultaneously. (The `kvsp-pub` commands acts as the
reader to the local stream, while `kvsp-sub` acts as the writer on remote stream.) 

Giving the `-s` flag to both `kvsp-pub` and `kvsp-sub` changes the operation from
"pub-sub" to "push-pull" mode (in ZeroMQ nomenclature). In this special `-s` mode, the
`kvsp-sub` instances each receive a "1/n" share of the data rather than full take.  Also,
in regular mode a publisher to which no subscriber is connected will drop frames but in
the special mode, the publisher retains data until a subscriber connects. (The data
capacity is still limited by the value set in `kvsp-init`.)

[[other_utilities]]
Other utilities
~~~~~~~~~~~~~~~

[width="90%",cols="10m,50m",grid="none",options="header"]
|===============================================================================
|command     | example 
|kvsp-spr    | kvsp-spr -B 0 spool
|kvsp-spw    | kvsp-spw -i 10 spool
|kvsp-mod    | kvsp-mod -k key -o spool2 spool
|kvsp-speed  | kvsp-speed 
|ramdisk     | ramdisk -c -s 1G /mnt/ramdisk
|===============================================================================

The `kvsp-spr` utility is used to manually read a spool and print its frames to the
screen. Normally it will block waiting for data once it reaches the end of the spool but
the `-B 0` (no-block) option tells it to stop reading if the end of the spool is reached. 

The `kvsp-spw` utility is used only for testing; it writes a frame of data to the spool
(or several frames if the `-i` option is used with a count); in the latter mode there is a
sleep (delay) between each frame, which can be adjusted using the `-d <seconds>` option.

The `kvsp-mod` command "obfuscates" selected values from a source spool to hash values
in the output spool (named with the `-o` option). For each key named with the `-k` flag,
its value in the output spool is replaced with a mathematical hash.  The hash numbers
preserve consistency (so the same input value produces the same output value) but the
value itself is a meaningless number.

A simple benchmark is performed by the `kvsp-speed` utility to measure read and write
performance.

The `ramdisk` utility creates, queries or unmounts a ramdisk (a Linux tmpfs filesystem).
In the form shown in the table above it creates a 1G ramdisk on the `/mnt/ramdisk` mount
point (this directory must already exist). A ramdisk created this way will appear in the
`/proc/mounts` listing. If a ramdisk already exists on that mount point, the command does
nothing.  In create (`-c`) mode, the `-d <dir>` option may be used one or more times to
specify (as absolute paths) directories to create within the ramdisk.  Using `ramdisk -u
/mnt/ramdisk` unmounts it.  The `-q` option queries a directory to see if its a ramdisk
and show its size.  The `ramdisk` utility is included with kvspool because it is often
convenient to locate a spool on a ramdisk for performance.

Examples & API
--------------

Perl
~~~~
[source,perl]
  use KVSpool;
  my $v = KVSpool->new("spool");
  my $h = {'day' => 'Wednesday', 'user' => 'Troy'};
  $v->write($h);

In Perl the KVSpool object is instantiated with one directory argument. Then every time
the `write` method is called with a hash reference as argument, it's written to the spool.
To read a spool, use the `read` method which returns a hash reference each times it's
called:

  my $h = $v->read();

Python
~~~~~~
[source,python]
  import kvspool
  kv = kvspool.Kvspool("spool")
  d = {"day":"Wednesday","user":"Troy"}
  kv.write(d)

The `write` method takes a dictionary, while the `read` method returns a dictionary:

  d = kv.read()

C/C++
~~~~~
C programs must be linked with -lkvspool. 

[source,c]
  #include "kvspool.h"
  ...
  void *sp = kv_spoolwriter_new("spool");
  void *set = kv_set_new();
  kv_adds(set, "day", "Wednesday");
  kv_adds(set, "user", "Troy");
  kv_spool_write(sp,set);
  ...
  kv_set_free(set);
  kv_spoolwriter_free(sp);

In C, a spool is opened for writing by calling `kv_spoolwriter_new` which takes the spool
directory as argument. It returns an opaque handle (which you should eventually free with
`kv_spoolwriter_free`).

Kvspool provides a data structure that implements a dictionary in C. It is created using
`kv_set_new` which returns an opaque handle (which should eventually be freed using
`kv_set_free`). In the meantime, it can be used for the whole lifetime of the program, by
adding key-value pairs to it, writing them out, clearing it, and reusing it over and over.
To add a key-value pair, use `kv_adds` which takes the set handle, the key and the value.
The key and value get 'copied' into the set (the set does not keep a pointer to them).
To write the set into the spool, call `kv_spool_write` with the spool and set handle.
To re-use the set, call `kv_set_clear` with the set handle. For debugging you can dump a
set to stderr using `kv_set_dump(set,stderr)`.

To open a spool for reading, call `kv_spoolreader_new` which takes the spool directory and
returns an opaque handle to the spool.  Then call `kv_spool_read` to read the spool.

[source,c]
  void *sp = kv_spoolreader_new("spool");
  void *set = kv_set_new();
  kv_spool_read(sp,set,1);

The final argument to `kv_spool_read` specifies whether it should block if there is no
data ready in the spool. A positive return value means success (data was read from the
spool and it's been populated into the set).  A C program can iterate through all the
key-value pairs in the set like this:

[source,c]
  kv_t *kv = NULL;
  while ( (kv = kv_next(set, kv))) {
    printf("key is %s\n", kv->key);
    printf("value is %s\n", kv->val);
  }

You can also fetch a particular key-value pair from the set using `kv_get` and providing
the key as the final argument:

 kv_t *kv = kv_get(set, "user");

The number of key-value pairs in the set can be obtained using `kv_len`:

 int count = kv_len(set);

The C API also has a function to rewind the spool, which works if there is no reader that
has the spool open at the time. It takes the spool directory as its only argument.

 sp_reset(dir);

Roadmap
-------
Kvspool is a young library and has some rough edges and room for improvement.

* The Java API needs documentation and unit tests.
* The C API has some deprecated functions to support binary values 
* It's only been tested with Ubuntu 10.04
* Autoconf detection for Perl, Python, Java should be improved
* Test suite is minimal, although kvspool has extensive production use
* Support multi-writer, multi-reader (see doc/future.txt)
* Replace segemented data files with one memory mapped, circular file
* Use JSON internally

Acknowledgments
---------------
Special thanks to Trevor Adams for writing the Perl and Java bindings and to
http://jhuapl.edu/ott[JHU/APL OTT] for their support.

// vim: set tw=90 wm=2 syntax=asciidoc: 

